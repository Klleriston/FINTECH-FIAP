package br.com.fiap;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import br.com.fiap.dao.AccountDao;
import br.com.fiap.dao.DAO;
import br.com.fiap.dao.TransactionDao;
import br.com.fiap.models.Account;
import br.com.fiap.models.Transaction;

public class Main {

    public static void main(String[] args) {
        Connection connection = DAO.connect();
        if (connection == null) {
            System.err.println("Connection failed!");
            return;
        }

        try (Statement stmt = connection.createStatement()) {
            stmt.executeUpdate("DROP TABLE TB_TRANSACTIONS CASCADE CONSTRAINTS");
            stmt.executeUpdate("DROP TABLE TB_ACCOUNTS CASCADE CONSTRAINTS");
            stmt.executeUpdate("CREATE TABLE TB_ACCOUNTS (id NUMBER GENERATED BY DEFAULT AS IDENTITY, name VARCHAR2(100), document_id VARCHAR2(20), balance NUMBER(19, 2), PRIMARY KEY (id))");
            stmt.executeUpdate("CREATE TABLE TB_TRANSACTIONS (id NUMBER GENERATED BY DEFAULT AS IDENTITY, acc_id NUMBER, title VARCHAR2(100), description VARCHAR2(255), value NUMBER(19, 2), date_transaction DATE, PRIMARY KEY (id), FOREIGN KEY (acc_id) REFERENCES TB_ACCOUNTS(id))");
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }

        Account accMain = new Account("Conta principal", "1111111111", new BigDecimal("3000"));
        Account accMock = new Account("Conta mock", "222222222", new BigDecimal("50000"));

        Transaction transactionMain = new Transaction(accMain, "Conta de luz", "Pagamento da conta de luz", new BigDecimal("199"), LocalDate.of(2024, 3, 14));
        Transaction transactionMock = new Transaction(accMock, "Conta de internet", "Pagamento da conta de internet", new BigDecimal("1000"), LocalDate.of(2024, 3, 14));

        AccountDao accDao = new AccountDao(connection);
        accDao.insert(accMain);
        accDao.insert(accMock);
        List<Account> accounts = accDao.getAll();
        for (Account a : accounts) {
            System.out.println(a.toString());
        }

        TransactionDao transactionDao = new TransactionDao(connection);
        transactionDao.insert(transactionMain);
        transactionDao.insert(transactionMock);
        List<Transaction> transactions = transactionDao.getAll();
        for (Transaction t : transactions) {
            System.out.println(t.toString());
        }

        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
